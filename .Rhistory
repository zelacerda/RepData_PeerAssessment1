quiz4 <- quiz2[5]
quiz4
quiz4[5]
quiz2[[5][1]]
quiz2$X.3
quiz2$X.3[5]
quiz4 <- quiz2$X.3[5:194]
quiz4
gsub(",", "", quiz4)
as.numeric(gsub(",", "", quiz4))
mean(as.numeric(gsub(",", "", quiz4)))
grep("^United", quiz2$X.2)
q()
x <- rnorm(100)
str(x)
y < rnorm(100)
y <- rnorm(100)
plot(x, y)
z <- lm(y ~ x)
z
type(z)
str(z)
z
abline(z)
abline(z + 1)
abline(z, col = "red")
x <- rnorm(100)
plot(x, y)
z <- lm(y ~ x)
abline(z, col = "red")
hist(x)
x < rnorm(1000)
x <- rnorm(1000)
hist(x)
x <- rnorm(1000)
hist(x)
head(mtcars)
plot(mtcars$hp, mtcars$mpg)
with(mtcars, plot(mpg, hp))
z <- rpois(10, 1)
?rpois
hist(z)
z <- rpois(10, 2)
hist(z)
z <- rpois(10, 3)
z <- rpois(10, 3)
hist(z)
g <- gl(2, 10)
g
g <- gl(2, 10, labels = c("H", "M"))
g
library(datasets)
head(faithful)
with(faithful, plot(eruptions, waiting))
pdf(file = "teste.pdf")
with(faithful, plot(eruptions, waiting))
title(main = "Oi, beleza?")
dev.off()
title(main = "Oi, beleza?")
title(main = "Oi, Zé, beleza?")
with(faithful, plot(eruptions, waiting))
title(main = "Oi, Zé, beleza?")
with(faithful, plot(eruptions, waiting, type = "n"))
with(faithful, points(eruptions < 3, waiting))
with(faithful, points(eruptions, waiting))
with(faithful, plot(eruptions, waiting, type = "n"))
with(faithful, points(eruptions[eruptions < 3], waiting[eruptions < 3]))
with(faithful, points(eruptions[eruptions < 3], waiting[eruptions < 3], pch = 20))
with(faithful, plot(eruptions, waiting))
title(main = "Olá, mundo!")
dev.copy(png, "teste.png")
dev.off()
with(faithful, plot(eruptions, waiting))
with(faithful, line(eruptions, waiting))
with(faithful, hist(eruptions))
names(mtcars)
str(mtcars)
mtcars <- transform(mtcars, cyl = factor(cyl))
str(mtcars)
boxplot(mtcars$hp)
mtcars[mtcars$hp  > 300]
mtcars[mtcars$hp  > 300, ]
mtcars[mtcars$hp  > 200, ]
library(lattice)
head(airquality)
xyplot(Ozone ~ Wind, data = airquality)
xyplot(Ozone ~ Wind | month, data = airquality)
xyplot(Ozone ~ Wind | Month, data = airquality)
airuality <- transform(airquality, Month = factor(Month, labels = c("May", "June", "July", "August", "September")))
xyplot(Ozone ~ Wind | Month, data = airquality)
xyplot(Ozone ~ Wind | Month, data = airquality, layout = c(5, 1))
str(airquality)
airquality <- transform(airquality, Month = factor(Month, labels = c("May", "June", "July", "August", "September")))
xyplot(Ozone ~ Wind | Month, data = airquality)
xyplot(Ozone ~ Wind | Month, data = airquality, layout = c(5, 1))
?url
?curl
?rcurl
library(RCurl)
?getURL
library(httr)
r <- POST("http://www.datasciencetoolkit.org/text2people", body = "Tim O'Reilly, Archbishop Huxley")
r
?GET
GET("http://google.com")
GET("https://api.runkeeper.com/user")
GET("https://api.runkeeper.com/user", add_headers(Host = "api.runkeeper.com", Autorization = "Bearer 0006f0cb9cd840d1894b0f5dbcb7c010"))
GET("https://api.runkeeper.com/user", add_headers(Autorization = "Bearer 0006f0cb9cd840d1894b0f5dbcb7c010"))
GET("https://api.runkeeper.com/user", add_headers(Autorization = "Bearer 0006f0cb9cd840d1894b0f5dbcb7c010))
GET("https://api.runkeeper.com/user", add_headers(Autorization = "Bearer 0006f0cb9cd840d1894b0f5dbcb7c010", Accept = "application/vnd.com.runkeeper.User+json"))
GET("https://api.runkeeper.com/user", add_headers("Autorization" = "Bearer 0006f0cb9cd840d1894b0f5dbcb7c010", "Accept" = "application/vnd.com.runkeeper.User+json"))
GET("https://api.runkeeper.com/user", add_headers("Host" = "api.runkeeper.com", Autorization" = "Bearer 0006f0cb9cd840d1894b0f5dbcb7c010", "Accept" = "application/vnd.com.runkeeper.User+json"))
GET("https://api.runkeeper.com/user", add_headers("Host" = "api.runkeeper.com", "Autorization" = "Bearer 0006f0cb9cd840d1894b0f5dbcb7c010", "Accept" = "application/vnd.com.runkeeper.User+json"))
?sign_oauth2.0
?config
GET("https://api.runkeeper.com/user", add_headers(Host = "api.runkeeper.com", Autorization = "Bearer 0006f0cb9cd840d1894b0f5dbcb7c010", Accept = "application/vnd.com.runkeeper.User+json"))
?oauth2.0_token
GET("http://api.runkeeper.com/activity/?access_token=0006f0cb9cd840d1894b0f5dbcb7c010")
run_data <- GET("http://api.runkeeper.com/activity/?access_token=0006f0cb9cd840d1894b0f5dbcb7c010")
library(jsonlite)
install.packages("jsonlite")
library(jsonlite)
run_data <- fromJSON("http://api.runkeeper.com/activity/?access_token=0006f0cb9cd840d1894b0f5dbcb7c010")
library(curl)
install.packages("curl")
library(curl)
run_data <- fromJSON("http://api.runkeeper.com/activity/?access_token=0006f0cb9cd840d1894b0f5dbcb7c010")
run_data
run_data <- fromJSON("http://api.runkeeper.com/fitnessActivities/?access_token=0006f0cb9cd840d1894b0f5dbcb7c010")
run_data[1]
run_data[2]
run_data[3]
names(run_data[3])
names(run_data)
rundata$names[1]
run_data$names[1]
run_data$items[1]
run_data$items[2]
str(run_data[3])
run_data <- run_data[3]
head(run_data)
names(run_data)
as.table(run_data)
run_data$duration
run_data$entry_mode
names$items$duration
run_data$items$duration
hms(run_data$items$duration)
library(lubridate)
hms(run_data$items$duration)
?hms
ms(run_data$items$duration)
second(run_data$items$duration)
?second
seconds_to_period(100)
str(seconds_to_pediod(100))
str(seconds_to_period(100))
seconds_to_period(run_data$items$duration)
results$time <- seconds_to_period(run_data$items$duration)
results <- data.frame()
results$time <- seconds_to_period(run_data$items$duration)
results$tempo <- seconds_to_period(run_data$items$duration)
str(results)
names(run_data$items)
run_data$items$start_time
str(run_data$items$start_time)
ymd(run_data$items$start_time)
hms(run_data$items$start_time)
split.Date(run_data$items$start_time)
?split.Date
split(run_data$items$start_date, ", ")
split(run_data$items$start_time, ", ")
?split
split.Date(run_data$items$start_time)
split.Date(run_data$items$start_time, f="%D")
split.Date(run_data$items$start_time, f="%w, %d %m %Y")
?split.Date
fomat.Date(run_data$items$start_time)
format.Date(run_data$items$start_time)
as.Date(run_data$items$start_time)
as.Date(run_data$items$start_time, format = "%c")
as.Date(run_data$items$start_time, format = "%a, %d %b %Y %X")
time()
date()
as.Date(run_data$items$start_time, format = "%a, %d %b %Y %T")
run_data$items$start_time[, 2:5]
run_data$items$start_time
run_data$items
a_string <- "Tue, 5 May 2015 16:09:19"
as.Date(a_string)
a_string <- "5 May 2015 16:09:19"
as.Date(a_string)
as.Date(a_string, format="%d %b %Y %T")
tolower(a_string)
as.Date(a_string, format="%d %b %Y %T")
as.Date(a_string, format="%d %b %Y %X")
as.Date(a_string)
ymd(a_string)
split("Tue, 5 May 2015 16:09:19", ",")
strplit("Tue, 5 May 2015 16:09:19", ",")
strsplit("Tue, 5 May 2015 16:09:19", ",")
substr("Tue, 5 May 2015 16:09:19", 2,)
substr("Tue, 5 May 2015 16:09:19", 2, 5)
substr("Tue, 5 May 2015 16:09:19", 2, ...)
substr("Tue, 5 May 2015 16:09:19", 2, -1)
substr("Tue, 5 May 2015 16:09:19", 2)
substr("Tue, 5 May 2015 16:09:19", 5, 20)
substr("Tue, 5 May 2015 16:09:19", 5, 15)
substr("Tue, 25 May 2015 16:09:19", 5, 15)
substr("Tue, 25 May 2015 16:09:19", 6, 15)
substr("Tue, 5 May 2015 16:09:19", 6, 15)
substr("Tue, 25 May 2015 16:09:19", 6, nchar("Tue, 5 May 2015 16:09:19"))
as.Date("20/05/2001")
as.Date("20/05/2001", format = "%d/%m/%Y")
as.Date("5 May 2015", format = "%d %b %Y")
as.Date("5 May 2015", format = "%d %B %Y")
as.Date("5 may 2015", format = "%d %b %Y")
as.Date("5 maio 2015", format = "%d %b %Y")
Sys.getlocale()
sub("Tue", "", "Tue, 5 May 2015 16:09:19")
sub("w", "", "Tue, 5 May 2015 16:09:19")
sub("\w", "", "Tue, 5 May 2015 16:09:19")
sub("/w", "", "Tue, 5 May 2015 16:09:19")
sub("^/w", "", "Tue, 5 May 2015 16:09:19")
sub("$/w", "", "Tue, 5 May 2015 16:09:19")
sub("\/w", "", "Tue, 5 May 2015 16:09:19")
sub("\/w\", "", "Tue, 5 May 2015 16:09:19")
sub("/w/", "", "Tue, 5 May 2015 16:09:19")
sub("/d/", "", "Tue, 5 May 2015 16:09:19")
sub("/d", "", "Tue, 5 May 2015 16:09:19")
sub("/^\w+", "", "Tue, 5 May 2015 16:09:19")
sub("^\w+", "", "Tue, 5 May 2015 16:09:19")
sub("^w+", "", "Tue, 5 May 2015 16:09:19")
sub("/^w+/", "", "Tue, 5 May 2015 16:09:19")
sub("/^\w+/", "", "Tue, 5 May 2015 16:09:19")
sub("/^\w+/", "", "Tue, 5 May 2015 16:09:19")
sub("\\w+/", "", "Tue, 5 May 2015 16:09:19")
sub("\\w+", "", "Tue, 5 May 2015 16:09:19")
sub("\\w+, ", "", "Tue, 5 May 2015 16:09:19")
as.Date("Ter, 5 Mai 2015 16:09:19", format="%a, %d %b %Y %X")
as.Date("Ter, 5 Mai 2015 16:09:19", format="%d %b %Y %X")
as.Date("Ter, 5 Mai 2015 16:09:19", format="%a, %d %b %Y %X")
today()
today(tzone = -3)
now()
stamp("Tue, 5 May 2015 16:09:19")
guess_formats("Tue, 5 May 2015 16:09:19","adbYX")
guess_formats("Tue, 5 May 2015 16:09:19","adbYt")
guess_formats("Tue, 5 May 2015 16:09:19","adbY")
timespan("Tue, 5 May 2015 16:09:19")
dmy_hms("Tue, 5 May 2015 16:09:19")
dmy_hms("Tue, 5 May 2015 16:09:19", locale="en_US")
dmy_hms("Tue, 5 May 2015 16:09:19", locale="EN_us")
dmy_hms("Tue, 5 May 2015 16:09:19", locale="en_US")
dmy_hms("5 May 2015 16:09:19", locale="en_US")
dmy_hms("5 May 2015 16:09:19")
dmy_hms("5 Mai 2015 16:09:19")
Sys.getlocale("LC_TIME")
Sys.setlocale("LC_TIME", "en_US.UTF-8")
Sys.setlocale("LC_TIME", "english")
library(lubridate)
dmy_hms("5 Mai 2015 16:09:19")
dmy_hms("5 May 2015 16:09:19")
Sys.getlocale()
library(jsonlite)
rk_data <- toJSON("http://api.runkeeper.com/fitnessActivities/?access_token=0006f0cb9cd840d1894b0f5dbcb7c010")
rk_data
rk_data <- toJSON("https://api.runkeeper.com/fitnessActivities/?access_token=0006f0cb9cd840d1894b0f5dbcb7c010")
?toJSON
rk_data <- fromJSON("https://api.runkeeper.com/fitnessActivities/?access_token=0006f0cb9cd840d1894b0f5dbcb7c010")
rk_data$items
rk_data$items$start_time
dmy_hms(rk_data)
dmy_hms(rk_data$items$start_time)
rk_data$items$start_time <- dmy_hms(rk_data$items$start_time)
rk_data$items$start_time
month(rk_data$items$start_time)
with(rk_data$items, plot(start_time, total_distance))
with(rk_data$items, plot(start_time, total_distance))
rk_data <- fromJSON("https://api.runkeeper.com/fitnessActivities/?size=10&access_token=0006f0cb9cd840d1894b0f5dbcb7c010")
rk_data$items$start_time <- dmy_hms(rk_data$items$start_time)
with(rk_data$items, plot(start_time, total_distance))
rk_data$items$start_time
rk_data <- fromJSON("https://api.runkeeper.com/fitnessActivities/?items=10&access_token=0006f0cb9cd840d1894b0f5dbcb7c010")
rk_data$items$start_time <- dmy_hms(rk_data$items$start_time)
with(rk_data$items, plot(start_time, total_distance))
rk_data$items$start_time
rk_data <- fromJSON("https://api.runkeeper.com/fitnessActivities?pageSize=300&access_token=0006f0cb9cd840d1894b0f5dbcb7c010")
rk_data$items$start_time <- dmy_hms(rk_data$items$start_time)
with(rk_data$items, plot(start_time, total_distance))
with(rk_data$items, plot(duration, total_distance))
linha <- lm(rk_data$items$total_distance ~ rk_data$items$duration)
abline(linha, col="Blue")
points(rk_data$items$duration[year(rk_data$items$start_time) == 2015], rk_data$items$duration[year(rk_data$items$start_time) == 2015], col="Red", pch=20)
year(rk_data$items$start_line)
year(rk_data$items$start_time)
points(rk_data$items$duration[year(rk_data$items$start_time) == 2014], rk_data$items$duration[year(rk_data$items$start_time) == 2014], col="Blue", pch=20)
with(rk_data$items, plot(start_time, total_distance, type = "n"))
with(rk_data$items, plot(duration, total_distance, type = "n"))
points(rk_data$items$duration[year(rk_data$items$start_time) == 2014], rk_data$items$total_distance[year(rk_data$items$start_time) == 2014], col="Blue", pch=20)
points(rk_data$items$duration[year(rk_data$items$start_time) == 2015], rk_data$items$total_distance[year(rk_data$items$start_time) == 2014], col="Red", pch=20)
points(rk_data$items$duration[year(rk_data$items$start_time) == 2015], rk_data$items$total_distance[year(rk_data$items$start_time) == 2015], col="Red", pch=20)
seconds(rk_data$items$duration)
ms(rk_data$items$duration)
?seconds
seconds_to_period(rk_data$items$duration)
rk_data$items$duration <- second_to_period(rk_data$items$duration)
rk_data$items$duration <- seconds_to_period(rk_data$items$duration)
rk_data$items$duration
corrida <- rk_data$items
corrida$duration
corrida$start_time
write.csv2(corrida, "corrida.csv")
rbinom(1, size = 1, prob = 0.5)
rbinom(1, size = 1, prob = 0.5)
rbinom(1, size = 1, prob = 0.5)
rbinom(1, size = 1, prob = 0.5)
rbinom(1, size = 1, prob = 0.5)
rbinom(1, size = 1, prob = 0.5)
rbinom(1, size = 2, prob = 0.5)
rbinom(1, size = 2, prob = 0.5)
rbinom(1, size = 2, prob = 0.5)
rbinom(1, size = 2, prob = 0.5)
rbinom(1, size = 2, prob = 0.5)
rbinom(1, size = 2, prob = 0.5)
rbinom(1, size = 2, prob = 0.5)
rbinom(1, size = 2, prob = 0.5)
rbinom(1, size = 1, prob = 0.1)
rbinom(1, size = 1, prob = 0.1)
rbinom(1, size = 1, prob = 0.1)
rbinom(1, size = 1, prob = 0.1)
rbinom(1, size = 1, prob = 0.1)
rbinom(1, size = 1, prob = 0.1)
rbinom(1, size = 1, prob = 0.1)
rbinom(1, size = 1, prob = 0.1)
rbinom(1, size = 1, prob = 0.1)
rbinom(1, size = 1, prob = 0.1)
rbinom(1, size = 1, prob = 0.1)
rbinom(1, size = 1, prob = 0.1)
rbinom(1, size = 1, prob = 0.1)
rbinom(1, size = 1, prob = 0.1)
rbinom(1, size = 1, prob = 0.1)
rbinom(1, size = 1, prob = 0.1)
rbinom(1, size = 1, prob = 0.1)
rbinom(1, size = 1, prob = 0.1)
rbinom(1, size = 10, prob = 0.1)
rbinom(1, size = 10, prob = 0.1)
rbinom(1, size = 10, prob = 0.1)
rbinom(1, size = 10, prob = 0.1)
rbinom(1, size = 10, prob = 0.1)
rbinom(1, size = 10, prob = 0.1)
rbinom(1, size = 10, prob = 0.1)
rbinom(1, size = 10, prob = 0.1)
rbinom(1, size = 10, prob = 0.1)
rbinom(1, size = 10, prob = 0.1)
rbinom(1, size = 10, prob = 0.1)
rbinom(1, size = 10, prob = 0.1)
rbinom(1, size = 10, prob = 0.1)
rbinom(1, size = 10, prob = 0.1)
rbinom(1, size = 10, prob = 0.1)
rbinom(1, size = 10, prob = 0.1)
rbinom(1, size = 10, prob = 0.1)
rbinom(1, size = 10, prob = 0.1)
rbinom(1, size = 10, prob = 0.1)
rbinom(1, size = 10, prob = 0.1)
rbinom(1, size = 10, prob = 0.1)
rbinom(1, size = 10, prob = 0.1)
rbinom(1, size = 10, prob = 0.1)
rbinom(1, size = 10, prob = 0.1)
rbinom(1, size = 10, prob = 0.1)
rbinom(2, size = 1, prob = 0.5)
rbinom(2, size = 1, prob = 0.5)
rbinom(2, size = 1, prob = 0.5)
rbinom(1, size = 10, prob = 1)
rbinom(1, size = 10, prob = 1)
rbinom(1, size = 10, prob = 0.8)
rbinom(1, size = 10, prob = 0.8)
rbinom(1, size = 10, prob = 0.8)
rbinom(1, size = 10, prob = 0.8)
rbinom(1, size = 10, prob = 0.8)
rbinom(1, size = 10, prob = 0.8)
rbinom(1, size = 10, prob = 0.8)
rbinom(1, size = 10, prob = 0.8)
rbinom(1, size = 10, prob = 0.8)
rbinom(1, size = 10, prob = 0.8)
?rbinom
teste <- readRDS("R/ExploratoryDataAnalysis/exdata-data-NEI_data/summarySCC_PM25.rds")
head(teste)
plot(teste$year, teste$Emissions)
table(teste)
?hist
sd(c(5,8,12))
which.min(c(4,1,6))
which.min(c(4,2,6))
which.2
which.min(c(4,2,1))
which.min(c(4,2,2))
which.min(c(1,2,2))
wday
weekdays
weekdays()
weekdays(20)
weekdays(20.1)
weekdays(20050101)
weekdays(now())
now()
today()
time()
time
library(lubridate)
today
today()
w(today())
weekdays(today())
sys.setlocale("LC_ALL", "C")
Sys.setlocale("LC_ALL", "C")
weekdays(today())
rep(10)
rep(10, 10)
rep(c(1, 2), 10)
rep(c(1, 2), 10, each = 5)
rep(c(1, 2), each = 5)
hist(rnorm(100))
hist(rnorm(1000))
hist(rnorm(10000))
hist(rnorm(1000, mean = 5))
hist(rnorm(1000, mean = 5, sd = 0))
hist(rnorm(1000, mean = 5, sd = .2))
hist(rnorm(1000, mean = 5, sd = 1))
hist(rnorm(10000, mean = 5, sd = 1))
hist(rnorm(10000, mean = 5, sd = 12))
hist(rnorm(10000, mean = 5, sd = 2))
?rnorm
pretty(c(-1, 1), 10)
x <- pretty(c(-10, 10), 100)
y <- dnorm(x)
plot(x, y)
x <- rnorm(100)
y <- dnorm(x)
x <- pretty(c(-10, 10), 100)
x <- rnorm(100)
plot(x, y)
y <- dnorm(x)
plot(x, y)
diff(x)
diff(x, lag = 1)
range(x)
min(x)
max(x)
install.packages("geosphere")
library(geosphere)
?sp
coord$lat = 0
lat <- c(10, 20, -10)
long <- c(-30, 15, 45)
coords <- data.frame(lat, long)
coords
coords[1]
coords[1,]
distVincentyEllipsoid(coords[1,], coords[2,])
distVincentyEllipsoid(coords$lat, coords$long)
coords2 <- rbind(c(0,0), c(90,90))
coords2
coords2 <- cbind(c(0,0), c(90,90))
coords2
distm(coords)
coords
coords <- data.frame(long, lat)
coords
distm(coords)
distm(coords, fun = distVincentyEllipsoid)
distVincentyEllipsoid(coords[1,], coords[2,])
distm(coords[1,], coords, fun = distVincentyEllipsoid)
distm(coords, coords[1,], fun = distVincentyEllipsoid)
dists <- distm(coords, fun = distVincentyEllipsoid)
dist
dists <- distm(coords, fun = distVincentyEllipsoid)
dists
dist
dists
dists[1]
dists[1,]
min(dists[1,])
min(dists[1,], na.rm = TRUE)
dists <- as.data.frame(dists)
dists
dists[dists == 0] <- NA
dists
dists[1]
min(dists[1])
min(dists[1], na.rm = TRUE)
install.packages(c('rzmq','repr','IRkernel','IRdisplay'),
repos = c('http://irkernel.github.io/', getOption('repos')),
type = 'source')
IRkernel::installspec()
install.packages(c('rzmq','repr','IRkernel','IRdisplay'),
repos = c('http://irkernel.github.io/', getOption('repos')))
IRkernel::installspec()
IRkernel::installspec(user=F)
source('~/.active-rstudio-document', echo=TRUE)
setwd("GitHub/RepData_PeerAssessment1/")
source('~/.active-rstudio-document', echo=TRUE)
qplot(interval, steps, data = filled, facets = is_weekend ~.)
qplot(interval, steps, data = filled, method = sum, facets = is_weekend ~.)
qplot(interval, steps, data = filled, facets = is_weekend ~.)
qplot(interval, steps, data = filled, method = sum, formula = sum, facets = is_weekend ~.)
qplot(interval, mean(steps), data = filled)
by_interval_filled <- aggregate(steps ~ interval + is_weekend, filled, FUN = mean)
View(by_interval_filled)
View(by_interval)
dplot(interval, steps, data = by_interval_filled, facets = is_weekend ~., geom = "line")
qplot(interval, steps, data = by_interval_filled, facets = is_weekend ~., geom = "line")
